-- ----------------------------------------------------------------------------
-- Migration: create_initial_schema
-- Created: 2025-04-29 14:37:08
-- Purpose: Initial database schema setup for Project Manager application
-- Tables: projects, ai_questions
-- Author: Supabase Migration System
-- ----------------------------------------------------------------------------

-- create project status enum type
create type project_status as enum ('new', 'in_progress', 'finished');

comment on type project_status is 'Status options for a project throughout its lifecycle';

-- create projects table
create table projects (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid not null references auth.users(id) on delete cascade,
    name text not null,
    description text,
    status project_status not null default 'new',
    main_problem text,
    min_feature_set text,
    out_of_scope text,
    success_criteria text,
    prd text,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

comment on table projects is 'Stores user project information and metadata';
comment on column projects.id is 'Unique identifier for each project';
comment on column projects.user_id is 'Foreign key to auth.users - identifies the project owner';
comment on column projects.name is 'Project name provided by the user';
comment on column projects.description is 'Optional project description';
comment on column projects.status is 'Current project status (new, in_progress, finished)';
comment on column projects.main_problem is 'Description of the main problem the project solves';
comment on column projects.min_feature_set is 'Minimum set of features required for the project';
comment on column projects.out_of_scope is 'Features and functionality excluded from MVP';
comment on column projects.success_criteria is 'Criteria for measuring project success';
comment on column projects.prd is 'Generated PRD document content';
comment on column projects.created_at is 'Timestamp when the project was created';
comment on column projects.updated_at is 'Timestamp when the project was last updated';

-- create ai_questions table
create table ai_questions (
    id uuid primary key default uuid_generate_v4(),
    project_id uuid not null references projects(id) on delete cascade,
    question text not null,
    answer text not null,
    sequence_number integer not null,
    created_at timestamptz not null default now()
);

comment on table ai_questions is 'Stores AI-generated questions and user answers for projects';
comment on column ai_questions.id is 'Unique identifier for each question';
comment on column ai_questions.project_id is 'Foreign key to projects - identifies the associated project';
comment on column ai_questions.question is 'Question generated by AI';
comment on column ai_questions.answer is 'Answer provided by user';
comment on column ai_questions.sequence_number is 'Order of questions in the iterative process';
comment on column ai_questions.created_at is 'Timestamp when the question-answer pair was created';

-- create indices for improved query performance
-- index for finding projects by user_id
create index idx_projects_user_id on projects(user_id);

-- index for filtering projects by name
create index idx_projects_name on projects(name);

-- index for filtering projects by status
create index idx_projects_status on projects(status);

-- index for finding ai questions by project_id
create index idx_ai_questions_project_id on ai_questions(project_id);

-- index for sorting ai questions by sequence number within a project
create index idx_ai_questions_sequence on ai_questions(project_id, sequence_number);

-- create updated_at trigger function
create or replace function update_updated_at_column()
returns trigger as $$
begin
   new.updated_at = now();
   return new;
end;
$$ language 'plpgsql';

-- create trigger to automatically update the updated_at timestamp for projects
create trigger update_projects_updated_at
before update on projects
for each row
execute function update_updated_at_column();

-- create function to get ai question sequence for a project
create or replace function get_ai_question_sequence(project_id_param uuid)
returns table (
    id uuid,
    question text,
    answer text,
    sequence_number integer,
    created_at timestamptz
) as $$
begin
    return query
    select
        aq.id,
        aq.question,
        aq.answer,
        aq.sequence_number,
        aq.created_at
    from
        ai_questions aq
    where
        aq.project_id = project_id_param
    order by
        aq.sequence_number asc;
end;
$$ language plpgsql security definer;

comment on function get_ai_question_sequence(uuid) is 'Returns ordered sequence of AI questions for a specific project';

-- enable row level security
alter table projects enable row level security;
alter table ai_questions enable row level security;

-- RLS policies for projects table

-- anon users cannot access projects
create policy projects_select_policy_anon on projects 
    for select to anon
    using (false);

create policy projects_insert_policy_anon on projects 
    for insert to anon
    with check (false);

create policy projects_update_policy_anon on projects 
    for update to anon
    using (false);

create policy projects_delete_policy_anon on projects 
    for delete to anon
    using (false);

-- authenticated users can access only their own projects
create policy projects_select_policy_auth on projects 
    for select to authenticated
    using (user_id = auth.uid());

create policy projects_insert_policy_auth on projects 
    for insert to authenticated
    with check (user_id = auth.uid());

create policy projects_update_policy_auth on projects 
    for update to authenticated
    using (user_id = auth.uid());

create policy projects_delete_policy_auth on projects 
    for delete to authenticated
    using (user_id = auth.uid());

-- RLS policies for ai_questions table

-- anon users cannot access ai_questions
create policy ai_questions_select_policy_anon on ai_questions 
    for select to anon
    using (false);

create policy ai_questions_insert_policy_anon on ai_questions 
    for insert to anon
    with check (false);

create policy ai_questions_update_policy_anon on ai_questions 
    for update to anon
    using (false);

create policy ai_questions_delete_policy_anon on ai_questions 
    for delete to anon
    using (false);

-- authenticated users can access only questions related to their own projects
create policy ai_questions_select_policy_auth on ai_questions 
    for select to authenticated
    using (project_id in (select id from projects where user_id = auth.uid()));

create policy ai_questions_insert_policy_auth on ai_questions 
    for insert to authenticated
    with check (project_id in (select id from projects where user_id = auth.uid()));

create policy ai_questions_update_policy_auth on ai_questions 
    for update to authenticated
    using (project_id in (select id from projects where user_id = auth.uid()));

create policy ai_questions_delete_policy_auth on ai_questions 
    for delete to authenticated
    using (project_id in (select id from projects where user_id = auth.uid()));
