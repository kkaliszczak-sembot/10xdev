name: Pull Request Workflow

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Using Node.js 20 as no .nvmrc file was found
          cache: 'bun'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bunx eslint . --ext .js,.ts,.tsx,.astro

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests with coverage
        run: bun run test:coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 5

  # e2e-test:
  # Comment: Implemented to run locally, skipped in pipeline

  status-comment:
    name: PR Status Comment
    needs: [unit-test]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.unit-test.result == 'success') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: unit-coverage

      - name: Download E2E test results
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Create status comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read coverage summary if available
              let unitCoverageSummary = "No coverage data available";
              if (fs.existsSync('unit-coverage/coverage-summary.json')) {
                const coverageData = JSON.parse(fs.readFileSync('unit-coverage/coverage-summary.json', 'utf8'));
                const total = coverageData.total || {};
                unitCoverageSummary = `
                - Statements: ${total.statements?.pct || 0}%
                - Branches: ${total.branches?.pct || 0}%
                - Functions: ${total.functions?.pct || 0}%
                - Lines: ${total.lines?.pct || 0}%
                `;
              }
              
              // Create a formatted comment
              const comment = `
              ## ðŸš€ Pull Request Checks Completed Successfully

              ### ðŸ“Š Test Results
              
              #### âœ… Linting
              All linting checks passed successfully.
              
              #### âœ… Unit Tests
              All unit tests passed successfully.
              
              ### ðŸ“ˆ Coverage Summary
              
              #### Unit Test Coverage
              ${unitCoverageSummary}
              
              ---
              *This comment was automatically generated by GitHub Actions.*
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating status comment:', error);
              
              // Create a fallback comment
              const fallbackComment = `
              ## ðŸš€ Pull Request Checks Completed Successfully
              
              All checks have passed. Coverage reports are available as artifacts.
              
              ---
              *This comment was automatically generated by GitHub Actions.*
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fallbackComment
              });
            }
